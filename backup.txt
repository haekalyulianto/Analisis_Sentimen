   # ---------------------------------- GRAFIK 2 --------------------------------
    fig = go.Figure()
    
    # add line / trace 1 to figure
    fig.add_trace(go.Scatter(
        name='Emiten',
        x=ticker_data['Tanggal'],
        y=ticker_data['Close'],
        hovertext=ticker_data['Tanggal'],
        hoverinfo="text",
        marker=dict(
            color="red"
        ),
        showlegend=True
    ))

    # add line / trace 2 to figure
    fig.add_trace(go.Scatter(
        name='Sentimen',
        x=df_sentimen['tanggal'],
        y=df_sentimen['sentimen_convert'],
        hovertext=df_sentimen['tanggal'],
        hoverinfo="text",
        marker=dict(
            color="blue"
        ),
        showlegend=True
    ))
    

    st.plotly_chart(fig)
    
    # ---------------------------------- GRAFIK 3 ------------------------------------------------
    scaler = MinMaxScaler()

    sentimen_minmax = scaler.fit_transform(df_sentimen['nilaisentimen'].values.reshape(-1, 1))
    emiten_minmax = scaler.fit_transform(ticker_data['Close'].values.reshape(-1, 1))

    df_sentimen['minmax'] = sentimen_minmax
    ticker_data['minmax'] = emiten_minmax

    fig = go.Figure()

    # add line / trace 1 to figure
    fig.add_trace(go.Scatter(
        name='Emiten',
        x=ticker_data['Tanggal'],
        y=ticker_data['minmax'],
        hovertext=ticker_data['Tanggal'],
        hoverinfo="text",
        marker=dict(
            color="red"
        ),
        showlegend=True
    ))

    # add line / trace 2 to figure
    fig.add_trace(go.Scatter(
        name='Sentimen',
        x=df_sentimen['tanggal'],
        y=df_sentimen['minmax'],
        hovertext=df_sentimen['tanggal'],
        hoverinfo="text",
        marker=dict(
            color="blue"
        ),
        showlegend=True
    ))

    st.plotly_chart(fig)

    # ---------------------------------- GRAFIK 4 ------------------------------
    util.plot_candle_chart(ticker_data)

     # ---------------------------- Code ----------------------------
    emiten_max = ticker_data.loc[ticker_data['Close'].idxmax()]['Close']
    emiten_min = ticker_data.loc[ticker_data['Close'].idxmin()]['Close']

    sentimen_conv = []
    for i in range (num_rows):
        nilai_sentimen = df_sentimen.iloc[i,1]
        if (sentimen_min < 0):
            nilai_sentimen -= sentimen_min
        new_val = emiten_min + (nilai_sentimen*(emiten_max - emiten_min)/(sentimen_max - sentimen_min))
        sentimen_conv.append(new_val)

    df_sentimen['sentimen_convert'] = sentimen_conv
    print('----------------------')